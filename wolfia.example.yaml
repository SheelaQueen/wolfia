---

wolfia:
  debug:           true   # Some things are different. Set to false to properly run the bot.
  discordToken:    ""     # Discord bot token
  logChannelId:    0      # Id of a channel where to post general bot activity like games starting and ending.

database:
  jdbcUrl:         ""     # Postgres database. When running with the bundled docker-compose file, set to "jdbc:postgresql://db:5442/wolfia?user=wolfia&password=wolfia"

oauth2:
  clientId:        ""     # From Discord's Developer console: https://discord.com/developers/applications
  clientSecret:    ""     # From Discord's Developer console: https://discord.com/developers/applications
  baseRedirectUrl: "/"    # URL that should be redirected to after a successful authentication (usually the root).
  #baseRedirectUrl: "https://xyz.ngrok.io" # During development, put in your ngrok subdomain and uncomment instead of line above.

server:
  port:            4567   # Port of Wolfia's API.
  servlet:
    application-display-name: "Wolfia"

sentry:
  dsn:             ""     # Error aggregation service. See https://sentry.io

spring:
  main:
    lazy-initialization: true
  output:
    ansi:
      enabled: always
  redis:
    url:           ""     # Redis database. When running with the bundled docker-compose file, set to "redis://localhost:6389/0"
  security:
    oauth2:
      client:
        registration:
          discord:
            client-id: ""      # From Discord's Developer console: https://discord.com/developers/applications
            client-secret: ""      # From Discord's Developer console: https://discord.com/developers/applications
            client-authentication-method: post
            authorization-grant-type: authorization_code
            scope:
              - identify
              - guilds
            redirect-uri: "{baseUrl}/login/oauth2/code/discord"
            #redirect-uri: "https://xyz.ngrok.io/login/oauth2/code/discord" # During development, put in your ngrok subdomain and uncomment instead of line above.
            client-name: Log In With Discord
        provider:
          discord:
            authorization-uri: https://discord.com/api/oauth2/authorize
            token-uri: https://discord.com/api/oauth2/token
            user-info-uri: https://discord.com/api/users/@me
            # Spring Session assumes the principal name is unique, and indexes sessions by it for example.
            # The discord username is not unique though, and it can be changed anytime.
            # That is why we use the id here instead.
            username-attribute: id
  session:
    store-type: redis
    redis:
      flush-mode: immediate
    timeout: 365d

togglz:
  enabled: true
  feature-enums: space.npstr.wolfia.domain.FeatureFlag
  feature-manager-name: default
  console:
    enabled: true
    path: /api/togglz
    secured: true
    use-management-port: false

logging:
  file:
    name: './logs/wolfia.log'
    max-history: 30
    max-size: 1GB

  level:
    root: INFO
    space.npstr: DEBUG
    org.springframework.web.filter.CommonsRequestLoggingFilter: DEBUG

import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.container.extras.DockerWaitHealthyContainer
import com.bmuschko.gradle.docker.tasks.image.DockerPullImage
import org.sonarqube.gradle.SonarQubeTask

buildscript {
    apply from: 'gradle/versions.gradle'
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "gradle.plugin.org.flywaydb:gradle-plugin-publishing:$flywayVersion"

        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:$gradleGitVersion"
        classpath "org.ajoberstar.grgit:grgit-gradle:$grGitVersion"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$sonarVersion"
        classpath "nu.studer:gradle-jooq-plugin:$jooqPluginVersion"
        classpath "org.jooq:jooq-codegen:$jooqVersion"
        classpath "com.github.ben-manes:gradle-versions-plugin:$versionsPluginVersion"
        classpath "com.bmuschko:gradle-docker-plugin:$dockerPluginVersion"
        classpath "com.adarshr:gradle-test-logger-plugin:$testLoggerVersion"
        classpath "org.siouan:frontend-gradle-plugin:$frontendPluginVersion"
    }
}

ext {
    buildNumber = (System.getenv('CI') ? System.getenv('BUILD_NUMBER') : 'DEV')
}

configure(allprojects.findAll { it.name != 'platform' }) {
    apply plugin: 'java-library'
    apply plugin: 'idea'

    //set up autogenerated files in idea
    compileJava {
        options.annotationProcessorPath = configurations.annotationProcessor
    }
    idea {
        module {
            sourceDirs += sourceSets.main.output.generatedSourcesDirs
            generatedSourceDirs += sourceSets.main.output.generatedSourcesDirs
            testSourceDirs += sourceSets.test.output.generatedSourcesDirs
            generatedSourceDirs += sourceSets.test.output.generatedSourcesDirs
        }
    }

    dependencies {
        api platform(project(':platform'))
        annotationProcessor platform(project(':platform'))
        compileOnly platform(project(':platform'))
    }
}

allprojects {
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'com.adarshr.test-logger'
    apply plugin: 'jacoco'

    group = 'space.npstr.wolfia'

    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_11

    repositories {
        jcenter()                               // JDA, maybe others
        mavenCentral()                          // everything else
        maven { url 'https://jitpack.io' }      //for getting builds from github
    }

    dependencyUpdates {
        checkConstraints = true
        resolutionStrategy {
            componentSelection { rules ->
                rules.all { ComponentSelection selection ->
                    boolean rejected = ['alpha', 'beta', 'rc', 'm1', 'm2', 'm3', 'preview', 'pr1', 'pr2', 'pr3',
                                        'b180830.0438', 'b180830.0359', 'b180725.0644', 'b180725.0427', '2.3.3-b01', '2.3.3-b02' // jaxb bullshit
                    ].any {
                        q -> selection.candidate.version.toLowerCase().contains(q)
                    }
                    if (rejected) {
                        selection.reject('Alpha or beta version')
                    }
                }
            }
        }
    }

    test {
        useJUnitPlatform()
        jvmArgs '-XX:TieredStopAtLevel=1'
    }

    testlogger {
        theme 'mocha-parallel'
        showFullStackTraces true
    }

    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }
}

project(':platform') {
    apply plugin: 'java-platform'
    javaPlatform {
        allowDependencies()
    }
    dependencies {
        api platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
        constraints {
            api "net.dv8tion:JDA:$jdaVersion"
            api "io.sentry:sentry-logback:$sentryLogbackVersion"
            api "org.json:json:$orgJsonVersion"
            api "space.npstr:annotations:$annotationsVersion"
            api "org.immutables:value:$immutablesVersion"

            api "io.prometheus:simpleclient:$prometheusVersion"
            api "io.prometheus:simpleclient_hotspot:$prometheusVersion"
            api "io.prometheus:simpleclient_logback:$prometheusVersion"
            api "io.prometheus:simpleclient_common:$prometheusVersion"
            api "io.prometheus:simpleclient_caffeine:$prometheusVersion"
            api "space.npstr:prometheus_extensions:$promExtVersion"

            api "net.ttddyy:datasource-proxy:$dsProxyVersion"
            api "org.flywaydb:flyway-core:$flywayVersion"
            api "org.jooq:jooq:$jooqVersion"
            api "org.jooq:jooq-meta:$jooqVersion"
            api "org.jooq:jooq-codegen:$jooqVersion"

            api "org.togglz:togglz-core:$togglzVersion"
            api "org.togglz:togglz-slf4j:$togglzVersion"
            api "org.togglz:togglz-spring-boot-starter:$togglzVersion"
            api "org.togglz:togglz-console:$togglzVersion"
            api "org.togglz:togglz-spring-security:$togglzVersion"

            api "org.testcontainers:testcontainers:$testcontainersVersion"
        }
    }
}

project(':database-codegen') {
    apply plugin: 'org.flywaydb.flyway'
    apply plugin: 'nu.studer.jooq'
    apply plugin: 'com.bmuschko.docker-remote-api'

    configurations {
        flywayMigration
    }

    ext {
        codegenDbImageRepo = 'napstr/wolfia-postgres'
        codegenDbImageTag = '12'
        codegenDbImageName = codegenDbImageRepo + ':' + codegenDbImageTag
        codegenDbContainerName = 'wolfia-codegen-postgres'
        codegenJdbcUrl = "jdbc:postgresql://127.0.0.1:5435/codegen?user=codegen"
    }

    dependencies {
        flywayMigration platform(project(':platform'))
        jooqRuntime platform(project(':platform'))

        api "org.jooq:jooq"
        implementation "org.jooq:jooq-meta"
        implementation "org.jooq:jooq-codegen"
        api "org.postgresql:postgresql"
        flywayMigration "org.postgresql:postgresql"
        jooqRuntime "org.postgresql:postgresql"
    }

    task pullCodegenDbContainer(type: DockerPullImage) {
        image.set(codegenDbImageName)
    }

    task createCodegenDbContainer(type: DockerCreateContainer) {
        dependsOn pullCodegenDbContainer
        targetImageId(codegenDbImageName)
        containerName.set(codegenDbContainerName)
        hostConfig.autoRemove.set(true)
        hostConfig.portBindings.set(['127.0.0.1:5435:5432'])
        withEnvVar('ROLE', 'codegen')
        withEnvVar('DB', 'codegen')
    }

    task stopCodegenDbContainerPre(type: StopCodegenDbContainer) {
        targetContainerId codegenDbContainerName
    }

    task stopCodegenDbContainerPost(type: StopCodegenDbContainer) {
        targetContainerId codegenDbContainerName
    }


    task startCodegenDbContainer(type: DockerStartContainer) {
        createCodegenDbContainer.mustRunAfter stopCodegenDbContainerPre
        dependsOn(stopCodegenDbContainerPre, createCodegenDbContainer)
        targetContainerId codegenDbContainerName
    }

    task awaitCodegenDbContainer(type: DockerWaitHealthyContainer) {
        dependsOn startCodegenDbContainer
        targetContainerId codegenDbContainerName
        awaitStatusTimeout.set(40)
    }

    def migrationsInput = fileTree('src/main/resources/db/migrations')
    def migrationsOutput = fileTree('build/classes/generated/java/space/npstr/wolfia/db/gen')

    flyway {
        flywayMigrate {
            doFirst {
                // running these manually in a doFirst closure ensures that they are not executed all the time
                // currently there is no better way of running tasks optionally that another task depends on
                pullCodegenDbContainer.start()
                stopCodegenDbContainerPre.start()
                createCodegenDbContainer.start()
                startCodegenDbContainer.start()
                awaitCodegenDbContainer.start()
            }

            // combining input and output files ensures that this is task is run/cached correctly
            def inOut = migrationsInput + migrationsOutput
            inputs.files(inOut)
                    .withPropertyName('flywayMigrationsInput')
                    .withPathSensitivity(PathSensitivity.RELATIVE)
            outputs.files(inOut)
                    .withPropertyName('flywayMigrationsOutput')
        }
        url = "$codegenJdbcUrl"
        locations = ['filesystem:database-codegen/src/main/resources/db/migrations']
        configurations = ['flywayMigration']
    }

    jooq {
        version = jooqVersion
        edition = 'OSS'
        wolfia(sourceSets.main) {
            logging = 'WARN'
            jdbc {
                driver = 'org.postgresql.Driver'
                url = "$codegenJdbcUrl"
            }
            generator {
                name = 'org.jooq.codegen.DefaultGenerator'
                strategy {
                    name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
                database {
                    name = 'org.jooq.meta.postgres.PostgresDatabase'
                    inputSchema = 'public'
                    forcedTypes {
                        forcedType {
                            userType = 'space.npstr.wolfia.db.type.OAuth2Scope[]'
                            converter = 'space.npstr.wolfia.db.converter.OAuth2ScopeEnumArrayConverter'
                            includeExpression = '.*'
                            includeTypes = '_OAuth2Scope'
                        }
                        forcedType {
                            userType = 'java.util.HashMap<java.lang.String, java.lang.String>'
                            binding = 'space.npstr.wolfia.db.PostgresHstoreBinding'
                            includeExpression = '.*'
                            includeTypes = 'hstore'
                        }
                    }
                }
                target {
                    packageName = 'space.npstr.wolfia.db.gen'
                    directory = 'build/classes/generated/java'
                }
            }
        }
    }

    generateWolfiaJooqSchemaSource {
        inputs.files(migrationsInput)
                .withPropertyName('jooqMigrationsInput')
                .withPathSensitivity(PathSensitivity.RELATIVE)
        outputs.files(migrationsOutput)
                .withPropertyName('jooqMigrationsOutput')
        dependsOn(flywayMigrate)
        doLast {
            stopCodegenDbContainerPost.start()
        }
    }

    test {
        dependsOn(flywayMigrate)
        doLast {
            stopCodegenDbContainerPost.start()
        }
    }
}

project(':common') {
    dependencies {
        api "org.slf4j:slf4j-api"
    }
}

project(':dashboard') {
    apply plugin: 'org.siouan.frontend'

    frontend {
        nodeVersion = "$theNodeVersion"
        yarnEnabled = true
        yarnVersion = "$theYarnVersion"
        assembleScript = 'run build'
        checkScript = 'run lint'
    }

    def frontendBuildCacheConfig = {
        inputs.files('package.json', 'yarn.lock', 'babel.config.js', 'vue.config.js')
                .withPropertyName('frontendConfigFiles')
                .withPathSensitivity(PathSensitivity.RELATIVE)
        inputs.dir('src')
                .withPropertyName('frontendSources')
                .withPathSensitivity(PathSensitivity.RELATIVE)
        outputs.dir("$buildDir/dist")
                .withPropertyName('frontendOutput')
        outputs.cacheIf { true }
    }

    tasks.named('assembleFrontend').configure frontendBuildCacheConfig
    tasks.named('checkFrontend').configure frontendBuildCacheConfig
}

apply plugin: 'application'
apply plugin: 'com.gorylenko.gradle-git-properties'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.sonarqube'

version = "${versionTag()}".toString()


mainClassName = 'space.npstr.wolfia.Launcher'

configurations {
    // fucks with spring boot jar, we dont need it anyways
    // be VERY careful and test the produced jar if ever reenabled
    compile.exclude module: 'opus-java'

    // undertow master race
    implementation.exclude module: 'spring-boot-starter-reactor-netty'
    implementation.exclude module: 'spring-boot-starter-tomcat'
}

dependencies {
    implementation project(':common')
    implementation project(':database-codegen')

    implementation "net.dv8tion:JDA"

    implementation "ch.qos.logback:logback-classic"
    implementation "io.sentry:sentry-logback"

    implementation "org.yaml:snakeyaml"
    implementation "com.squareup.okhttp3:okhttp"
    implementation "com.github.ben-manes.caffeine:caffeine"
    implementation "org.json:json"
    implementation "space.npstr:annotations"

    implementation "io.lettuce:lettuce-core"
    implementation(group: "io.netty", name: "netty-transport-native-epoll", classifier: "linux-x86_64")
    implementation(group: "io.netty", name: "netty-transport-native-kqueue", classifier: "osx-x86_64")

    implementation "io.prometheus:simpleclient"
    implementation "io.prometheus:simpleclient_hotspot"
    implementation "io.prometheus:simpleclient_logback"
    implementation "io.prometheus:simpleclient_common"
    implementation "io.prometheus:simpleclient_caffeine"
    implementation "space.npstr:prometheus_extensions"

    annotationProcessor "org.immutables:value"
    compileOnly(group: 'org.immutables', name: 'value', classifier: 'annotations')

    implementation "net.ttddyy:datasource-proxy"
    implementation "org.flywaydb:flyway-core"

    implementation "org.togglz:togglz-core"
    implementation "org.togglz:togglz-slf4j"
    implementation "org.togglz:togglz-spring-boot-starter"
    implementation "org.togglz:togglz-console"
    implementation "org.togglz:togglz-spring-security"

    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-client"
    implementation "org.springframework.session:spring-session-data-redis"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude module: 'android-json' // json.org clone
    }
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.testcontainers:testcontainers"
    testImplementation "org.assertj:assertj-core"
    testImplementation "org.mockito:mockito-inline" // to mock final classes
    testImplementation "org.awaitility:awaitility"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.incremental = true
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation' << '-Xmaxerrs' << '10000' << '-Xdiags:verbose'
}

//required by spring boot configuration processor
compileJava.dependsOn(processResources)

processResources {
    dependsOn ':dashboard:assembleFrontend'

    from("${project(':dashboard').buildDir}/dist") {
        into 'public'
    }
}

tasks.withType(SonarQubeTask) {
    dependsOn jacocoTestReport
}

springBoot {
    buildInfo()
}

bootRun {
    //compiling tests during bootRun increases the likelyhood of catching broken tests locally instead of on the CI
    dependsOn compileTestJava

    //pass in custom jvm args
    // source: https://stackoverflow.com/a/25079415
    // example: ./gradlew bootRun -PjvmArgs="--illegal-access=debug -Dwhatever=value"
    if (project.hasProperty('jvmArgs')) {
        //noinspection GroovyAssignabilityCheck
        jvmArgs project.jvmArgs.split('\\s+')
    }
}

bootJar {
    archiveFileName = "wolfia.jar"
    doLast {
        copy {
            from 'build/libs/wolfia.jar'
            into '.'
        }
    }
}

//need two of these tasks, otherwise gradle complains about circular dependencies
class StopCodegenDbContainer extends DockerStopContainer {
    StopCodegenDbContainer() {
        onError { exception ->
            // Ignore exception if container does not exist otherwise throw it
            if (exception != null && exception.message != null //memes
                    && !exception.message.contains('No such container'))
                throw exception
        }
    }
}

//returns the last git tag (that needs to be in the form of MAJOR.MINOR.PATCH) and the build number
//@SuppressWarnings("GrMethodMayBeStatic")
String versionTag() {
    def matcher = /^([0-9]+\.[0-9]+\.[0-9]+).*$/
    def match = ("${grgit.describe()}" =~ matcher)[0]

    //noinspection GroovyAssignabilityCheck
    def result = match[1]
    result += '-'
    result += project.ext.buildNumber

    println("Version: " + result)
    return result
}
